{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class HeroService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.heroesUrl = 'api/heroes'; // Web APIのURL\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** サーバーからヒーローを取得する */\n  getHeroes() {\n    return this.http.get(this.heroesUrl).pipe(tap(heroes => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n  }\n  /** IDによりヒーローを取得する。idが見つからない場合は`undefined`を返す。 */\n  getHeroNo404(id) {\n    const url = `${this.heroesUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(heroes => heroes[0]),\n    // {0|1} 要素の配列を返す\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} hero id=${id}`);\n    }), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /** IDによりヒーローを取得する。見つからなかった場合は404を返却する。 */\n  getHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n  }\n  /* 検索語を含むヒーローを取得する */\n  searchHeroes(term) {\n    if (!term.trim()) {\n      // 検索語がない場合、空のヒーロー配列を返す\n      return of([]);\n    }\n    return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(_ => this.log(`found heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n  }\n  //////// Save methods //////////\n  /** POST: サーバーに新しいヒーローを登録する */\n  addHero(hero) {\n    return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n  }\n  /** DELETE: サーバーからヒーローを削除 */\n  deleteHero(id) {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n  }\n  /** PUT: サーバー上でヒーローを更新 */\n  updateHero(hero) {\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n  }\n  /**\r\n   * 失敗したHttp操作を処理します。\r\n   * アプリを持続させます。\r\n   *\r\n   * @param operation - 失敗した操作の名前\r\n   * @param result - observableな結果として返す任意の値\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: リモート上のロギング基盤にエラーを送信する\n      console.error(error); // かわりにconsoleに出力\n      // TODO: ユーザーへの開示のためにエラーの変換処理を改善する\n      this.log(`${operation} failed: ${error.message}`);\n      // 空の結果を返して、アプリを持続可能にする\n      return of(result);\n    };\n  }\n  /** HeroServiceのメッセージをMessageServiceを使って記録 */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","HeroService","constructor","http","messageService","headers","getHeroes","get","heroesUrl","pipe","heroes","log","handleError","getHeroNo404","id","url","h","outcome","getHero","_","searchHeroes","term","trim","addHero","hero","post","httpOptions","newHero","deleteHero","delete","updateHero","put","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\MyWork\\WorkTs\\TourOfHeroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Hero } from './hero';\r\nimport { MessageService } from './message.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HeroService {\r\n\r\n  private heroesUrl = 'api/heroes';  // Web APIのURL\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService) { }\r\n\r\n  /** サーバーからヒーローを取得する */\r\n  getHeroes(): Observable<Hero[]> {\r\n    return this.http.get<Hero[]>(this.heroesUrl)\r\n      .pipe(\r\n        tap(heroes => this.log('fetched heroes')),\r\n        catchError(this.handleError<Hero[]>('getHeroes', []))\r\n      );\r\n  }\r\n\r\n  /** IDによりヒーローを取得する。idが見つからない場合は`undefined`を返す。 */\r\n  getHeroNo404<Data>(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/?id=${id}`;\r\n    return this.http.get<Hero[]>(url)\r\n      .pipe(\r\n        map(heroes => heroes[0]), // {0|1} 要素の配列を返す\r\n        tap(h => {\r\n          const outcome = h ? 'fetched' : 'did not find';\r\n          this.log(`${outcome} hero id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** IDによりヒーローを取得する。見つからなかった場合は404を返却する。 */\r\n  getHero(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/${id}`;\r\n    return this.http.get<Hero>(url).pipe(\r\n      tap(_ => this.log(`fetched hero id=${id}`)),\r\n      catchError(this.handleError<Hero>(`getHero id=${id}`))\r\n    );\r\n  }\r\n\r\n  /* 検索語を含むヒーローを取得する */\r\n  searchHeroes(term: string): Observable<Hero[]> {\r\n    if (!term.trim()) {\r\n      // 検索語がない場合、空のヒーロー配列を返す\r\n      return of([]);\r\n    }\r\n    return this.http.get<Hero[]>(`${this.heroesUrl}/?name=${term}`).pipe(\r\n      tap(_ => this.log(`found heroes matching \"${term}\"`)),\r\n      catchError(this.handleError<Hero[]>('searchHeroes', []))\r\n    );\r\n  }\r\n\r\n  //////// Save methods //////////\r\n\r\n  /** POST: サーバーに新しいヒーローを登録する */\r\n  addHero(hero: Hero): Observable<Hero> {\r\n    return this.http.post<Hero>(this.heroesUrl, hero, this.httpOptions).pipe(\r\n      tap((newHero: Hero) => this.log(`added hero w/ id=${newHero.id}`)),\r\n      catchError(this.handleError<Hero>('addHero'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: サーバーからヒーローを削除 */\r\n  deleteHero(id: number): Observable<Hero> {\r\n    const url = `${this.heroesUrl}/${id}`;\r\n\r\n    return this.http.delete<Hero>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`deleted hero id=${id}`)),\r\n      catchError(this.handleError<Hero>('deleteHero'))\r\n    );\r\n  }\r\n\r\n  /** PUT: サーバー上でヒーローを更新 */\r\n  updateHero(hero: Hero): Observable<any> {\r\n    return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(\r\n      tap(_ => this.log(`updated hero id=${hero.id}`)),\r\n      catchError(this.handleError<any>('updateHero'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 失敗したHttp操作を処理します。\r\n   * アプリを持続させます。\r\n   *\r\n   * @param operation - 失敗した操作の名前\r\n   * @param result - observableな結果として返す任意の値\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: リモート上のロギング基盤にエラーを送信する\r\n      console.error(error); // かわりにconsoleに出力\r\n\r\n      // TODO: ユーザーへの開示のためにエラーの変換処理を改善する\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // 空の結果を返して、アプリを持続可能にする\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** HeroServiceのメッセージをMessageServiceを使って記録 */\r\n  private log(message: string) {\r\n    this.messageService.add(`HeroService: ${message}`);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/"]},"metadata":{},"sourceType":"module","externalDependencies":[]}