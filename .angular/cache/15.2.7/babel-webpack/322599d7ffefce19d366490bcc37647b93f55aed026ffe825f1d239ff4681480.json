{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let HeroService = /*#__PURE__*/(() => {\n  class HeroService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.heroesUrl = 'api/heroes'; // Web APIのURL\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    /** サーバーからヒーローを取得する */\n    getHeroes() {\n      return this.http.get(this.heroesUrl).pipe(tap(heroes => this.log('fetched heroes')), catchError(this.handleError('getHeroes', [])));\n    }\n    /** IDによりヒーローを取得する。idが見つからない場合は`undefined`を返す。 */\n    getHeroNo404(id) {\n      const url = `${this.heroesUrl}/?id=${id}`;\n      return this.http.get(url).pipe(map(heroes => heroes[0]),\n      // {0|1} 要素の配列を返す\n      tap(h => {\n        const outcome = h ? 'fetched' : 'did not find';\n        this.log(`${outcome} hero id=${id}`);\n      }), catchError(this.handleError(`getHero id=${id}`)));\n    }\n    /** IDによりヒーローを取得する。見つからなかった場合は404を返却する。 */\n    getHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.get(url).pipe(tap(_ => this.log(`fetched hero id=${id}`)), catchError(this.handleError(`getHero id=${id}`)));\n    }\n    /* 検索語を含むヒーローを取得する */\n    searchHeroes(term) {\n      if (!term.trim()) {\n        // 検索語がない場合、空のヒーロー配列を返す\n        return of([]);\n      }\n      return this.http.get(`${this.heroesUrl}/?name=${term}`).pipe(tap(_ => this.log(`found heroes matching \"${term}\"`)), catchError(this.handleError('searchHeroes', [])));\n    }\n    //////// Save methods //////////\n    /** POST: サーバーに新しいヒーローを登録する */\n    addHero(hero) {\n      return this.http.post(this.heroesUrl, hero, this.httpOptions).pipe(tap(newHero => this.log(`added hero w/ id=${newHero.id}`)), catchError(this.handleError('addHero')));\n    }\n    /** DELETE: サーバーからヒーローを削除 */\n    deleteHero(id) {\n      const url = `${this.heroesUrl}/${id}`;\n      return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted hero id=${id}`)), catchError(this.handleError('deleteHero')));\n    }\n    /** PUT: サーバー上でヒーローを更新 */\n    updateHero(hero) {\n      return this.http.put(this.heroesUrl, hero, this.httpOptions).pipe(tap(_ => this.log(`updated hero id=${hero.id}`)), catchError(this.handleError('updateHero')));\n    }\n    /**\r\n     * 失敗したHttp操作を処理します。\r\n     * アプリを持続させます。\r\n     *\r\n     * @param operation - 失敗した操作の名前\r\n     * @param result - observableな結果として返す任意の値\r\n     */\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: リモート上のロギング基盤にエラーを送信する\n        console.error(error); // かわりにconsoleに出力\n        // TODO: ユーザーへの開示のためにエラーの変換処理を改善する\n        this.log(`${operation} failed: ${error.message}`);\n        // 空の結果を返して、アプリを持続可能にする\n        return of(result);\n      };\n    }\n    /** HeroServiceのメッセージをMessageServiceを使って記録 */\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n  }\n  HeroService.ɵfac = function HeroService_Factory(t) {\n    return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  HeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroService,\n    factory: HeroService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}